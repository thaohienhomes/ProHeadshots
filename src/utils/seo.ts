import { Metadata } from 'next';

interface SEOConfig {
  title: string;
  description: string;
  keywords?: string[];
  image?: string;
  url?: string;
  type?: 'website' | 'article' | 'product';
  author?: string;
  publishedTime?: string;
  modifiedTime?: string;
  section?: string;
  tags?: string[];
}

const defaultConfig = {
  siteName: 'CVPHOTO - AI Headshot Studio',
  siteUrl: 'https://cvphoto.app',
  defaultImage: '/og-image.jpg',
  defaultDescription: 'Create professional AI-generated headshots in minutes. Powered by advanced AI models including Flux Pro Ultra, Imagen4, and Recraft V3.',
  twitterHandle: '@cvphoto',
  locale: 'en_US',
};

export function generateMetadata(config: SEOConfig): Metadata {
  const {
    title,
    description,
    keywords = [],
    image = defaultConfig.defaultImage,
    url,
    type = 'website',
    author,
    publishedTime,
    modifiedTime,
    section,
    tags = [],
  } = config;

  const fullTitle = title.includes(defaultConfig.siteName) 
    ? title 
    : `${title} | ${defaultConfig.siteName}`;

  const fullUrl = url ? `${defaultConfig.siteUrl}${url}` : defaultConfig.siteUrl;
  const fullImage = image.startsWith('http') ? image : `${defaultConfig.siteUrl}${image}`;

  const metadata: Metadata = {
    title: fullTitle,
    description,
    keywords: keywords.join(', '),
    authors: author ? [{ name: author }] : undefined,
    
    // Open Graph
    openGraph: {
      title: fullTitle,
      description,
      url: fullUrl,
      siteName: defaultConfig.siteName,
      images: [
        {
          url: fullImage,
          width: 1200,
          height: 630,
          alt: title,
        },
      ],
      locale: defaultConfig.locale,
      type,
      publishedTime,
      modifiedTime,
      section,
      tags,
    },

    // Twitter
    twitter: {
      card: 'summary_large_image',
      title: fullTitle,
      description,
      images: [fullImage],
      creator: defaultConfig.twitterHandle,
      site: defaultConfig.twitterHandle,
    },

    // Additional meta tags
    robots: {
      index: true,
      follow: true,
      googleBot: {
        index: true,
        follow: true,
        'max-video-preview': -1,
        'max-image-preview': 'large',
        'max-snippet': -1,
      },
    },

    // Verification
    verification: {
      google: process.env.GOOGLE_SITE_VERIFICATION,
      yandex: process.env.YANDEX_VERIFICATION,
      yahoo: process.env.YAHOO_VERIFICATION,
    },

    // Canonical URL
    alternates: {
      canonical: fullUrl,
    },
  };

  return metadata;
}

// Page-specific SEO configurations
export const seoConfigs = {
  home: {
    title: 'Professional AI Headshots in Minutes',
    description: 'Create stunning professional headshots with AI. Upload your photos and get high-quality headshots generated by Flux Pro Ultra, Imagen4, and Recraft V3.',
    keywords: ['AI headshots', 'professional photos', 'AI photography', 'headshot generator', 'business photos'],
    url: '/',
  },

  auth: {
    title: 'Sign In to CVPHOTO',
    description: 'Sign in to your CVPHOTO account to create professional AI-generated headshots.',
    keywords: ['sign in', 'login', 'account', 'AI headshots'],
    url: '/auth',
  },

  dashboard: {
    title: 'Dashboard',
    description: 'View your AI-generated headshots and manage your account.',
    keywords: ['dashboard', 'my photos', 'account management'],
    url: '/dashboard',
  },

  upload: {
    title: 'Upload Photos',
    description: 'Upload your photos to generate professional AI headshots.',
    keywords: ['upload photos', 'AI generation', 'photo upload'],
    url: '/upload',
  },

  pricing: {
    title: 'Pricing Plans',
    description: 'Choose the perfect plan for your AI headshot needs. Basic, Professional, and Executive packages available.',
    keywords: ['pricing', 'plans', 'AI headshots cost', 'subscription'],
    url: '/pricing',
  },

  about: {
    title: 'About CVPHOTO',
    description: 'Learn about CVPHOTO, the leading AI headshot generation platform powered by advanced AI models.',
    keywords: ['about', 'AI technology', 'company', 'team'],
    url: '/about',
  },

  contact: {
    title: 'Contact Us',
    description: 'Get in touch with the CVPHOTO team for support or inquiries.',
    keywords: ['contact', 'support', 'help', 'customer service'],
    url: '/contact',
  },
};

// Structured data generators
export function generatePersonSchema(person: {
  name: string;
  jobTitle?: string;
  company?: string;
  image?: string;
  email?: string;
  url?: string;
}) {
  return {
    '@context': 'https://schema.org',
    '@type': 'Person',
    name: person.name,
    jobTitle: person.jobTitle,
    worksFor: person.company ? {
      '@type': 'Organization',
      name: person.company,
    } : undefined,
    image: person.image,
    email: person.email,
    url: person.url,
  };
}

export function generateOrganizationSchema() {
  return {
    '@context': 'https://schema.org',
    '@type': 'Organization',
    name: defaultConfig.siteName,
    url: defaultConfig.siteUrl,
    logo: `${defaultConfig.siteUrl}/logo.png`,
    description: defaultConfig.defaultDescription,
    contactPoint: {
      '@type': 'ContactPoint',
      contactType: 'customer service',
      email: 'support@cvphoto.app',
    },
    sameAs: [
      'https://twitter.com/cvphoto',
      'https://linkedin.com/company/cvphoto',
    ],
  };
}

export function generateProductSchema(product: {
  name: string;
  description: string;
  price: string;
  currency: string;
  image: string;
  features: string[];
}) {
  return {
    '@context': 'https://schema.org',
    '@type': 'Product',
    name: product.name,
    description: product.description,
    image: product.image,
    offers: {
      '@type': 'Offer',
      price: product.price,
      priceCurrency: product.currency,
      availability: 'https://schema.org/InStock',
    },
    additionalProperty: product.features.map(feature => ({
      '@type': 'PropertyValue',
      name: 'Feature',
      value: feature,
    })),
  };
}

export function generateBreadcrumbSchema(breadcrumbs: Array<{ name: string; url: string }>) {
  return {
    '@context': 'https://schema.org',
    '@type': 'BreadcrumbList',
    itemListElement: breadcrumbs.map((crumb, index) => ({
      '@type': 'ListItem',
      position: index + 1,
      name: crumb.name,
      item: `${defaultConfig.siteUrl}${crumb.url}`,
    })),
  };
}

export function generateFAQSchema(faqs: Array<{ question: string; answer: string }>) {
  return {
    '@context': 'https://schema.org',
    '@type': 'FAQPage',
    mainEntity: faqs.map(faq => ({
      '@type': 'Question',
      name: faq.question,
      acceptedAnswer: {
        '@type': 'Answer',
        text: faq.answer,
      },
    })),
  };
}

// Sitemap generation utility
export function generateSitemap(pages: Array<{
  url: string;
  lastModified?: Date;
  changeFrequency?: 'always' | 'hourly' | 'daily' | 'weekly' | 'monthly' | 'yearly' | 'never';
  priority?: number;
}>) {
  const sitemap = `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
${pages.map(page => `  <url>
    <loc>${defaultConfig.siteUrl}${page.url}</loc>
    ${page.lastModified ? `<lastmod>${page.lastModified.toISOString()}</lastmod>` : ''}
    ${page.changeFrequency ? `<changefreq>${page.changeFrequency}</changefreq>` : ''}
    ${page.priority ? `<priority>${page.priority}</priority>` : ''}
  </url>`).join('\n')}
</urlset>`;

  return sitemap;
}
