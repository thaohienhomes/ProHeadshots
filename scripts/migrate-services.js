#!/usr/bin/env node

/**
 * Migration script to help switch between service providers
 * Usage: node scripts/migrate-services.js [ai|payment] [astria|fal|stripe|polar]
 */

const fs = require('fs');
const path = require('path');

const ENV_FILE = path.join(process.cwd(), '.env.local');
const ENV_EXAMPLE_FILE = path.join(process.cwd(), '.env.example');

function readEnvFile(filePath) {
  if (!fs.existsSync(filePath)) {
    return {};
  }
  
  const content = fs.readFileSync(filePath, 'utf8');
  const env = {};
  
  content.split('\n').forEach(line => {
    const trimmed = line.trim();
    if (trimmed && !trimmed.startsWith('#')) {
      const [key, ...valueParts] = trimmed.split('=');
      if (key && valueParts.length > 0) {
        env[key] = valueParts.join('=');
      }
    }
  });
  
  return env;
}

function writeEnvFile(filePath, env) {
  const lines = [];
  
  // Add header comment
  lines.push('# Environment variables for CV Photo App');
  lines.push('# Generated by migrate-services.js script');
  lines.push('');
  
  // Write environment variables
  Object.entries(env).forEach(([key, value]) => {
    lines.push(`${key}=${value}`);
  });
  
  fs.writeFileSync(filePath, lines.join('\n') + '\n');
}

function migrateAIService(provider) {
  console.log(`Migrating AI service to: ${provider}`);
  
  const env = readEnvFile(ENV_FILE);
  env.AI_PROVIDER = provider;
  
  if (provider === 'fal') {
    console.log('✓ Set AI_PROVIDER=fal');
    console.log('⚠️  Make sure to set FAL_AI_API_KEY in your .env.local file');
    console.log('⚠️  Get your API key from: https://fal.ai/dashboard/keys');
  } else if (provider === 'astria') {
    console.log('✓ Set AI_PROVIDER=astria');
    console.log('⚠️  Make sure to set ASTRIA_API_KEY in your .env.local file');
    console.log('⚠️  Get your API key from: https://www.astria.ai/users/edit#api');
  }
  
  writeEnvFile(ENV_FILE, env);
}

function migratePaymentService(provider) {
  console.log(`Migrating payment service to: ${provider}`);
  
  const env = readEnvFile(ENV_FILE);
  env.PAYMENT_PROVIDER = provider;
  
  if (provider === 'polar') {
    console.log('✓ Set PAYMENT_PROVIDER=polar');
    console.log('⚠️  Make sure to set POLAR_ACCESS_TOKEN in your .env.local file');
    console.log('⚠️  Get your API key from: https://polar.sh/dashboard');
    console.log('⚠️  Update your pricing plans in src/app/checkout/pricingPlansPolar.json');
  } else if (provider === 'stripe') {
    console.log('✓ Set PAYMENT_PROVIDER=stripe');
    console.log('⚠️  Make sure to set STRIPE_SECRET_KEY and STRIPE_TEST_SECRET_KEY in your .env.local file');
    console.log('⚠️  Update your pricing plans in src/app/checkout/pricingPlans.json');
  }
  
  writeEnvFile(ENV_FILE, env);
}

function showUsage() {
  console.log('Usage: node scripts/migrate-services.js [service] [provider]');
  console.log('');
  console.log('Services:');
  console.log('  ai       - AI image generation service');
  console.log('  payment  - Payment processing service');
  console.log('');
  console.log('AI Providers:');
  console.log('  astria   - Astria AI (original)');
  console.log('  fal      - Fal AI (new)');
  console.log('');
  console.log('Payment Providers:');
  console.log('  stripe   - Stripe (original)');
  console.log('  polar    - Polar Payment (new)');
  console.log('');
  console.log('Examples:');
  console.log('  node scripts/migrate-services.js ai fal');
  console.log('  node scripts/migrate-services.js payment polar');
}

function validateConfig() {
  console.log('Validating service configuration...');
  
  const env = readEnvFile(ENV_FILE);
  const errors = [];
  
  const aiProvider = env.AI_PROVIDER || 'fal';
  const paymentProvider = env.PAYMENT_PROVIDER || 'polar';
  
  // Validate AI configuration
  if (aiProvider === 'astria' && !env.ASTRIA_API_KEY) {
    errors.push('ASTRIA_API_KEY is required when using Astria AI');
  }
  if (aiProvider === 'fal' && !env.FAL_AI_API_KEY) {
    errors.push('FAL_AI_API_KEY is required when using Fal AI');
  }
  
  // Validate payment configuration
  if (paymentProvider === 'stripe' && !env.STRIPE_SECRET_KEY && !env.STRIPE_TEST_SECRET_KEY) {
    errors.push('STRIPE_SECRET_KEY or STRIPE_TEST_SECRET_KEY is required when using Stripe');
  }
  if (paymentProvider === 'polar' && !env.POLAR_ACCESS_TOKEN) {
    errors.push('POLAR_ACCESS_TOKEN is required when using Polar Payment');
  }
  
  if (errors.length === 0) {
    console.log('✅ Configuration is valid');
    console.log(`   AI Provider: ${aiProvider}`);
    console.log(`   Payment Provider: ${paymentProvider}`);
  } else {
    console.log('❌ Configuration errors:');
    errors.forEach(error => console.log(`   - ${error}`));
  }
  
  return errors.length === 0;
}

// Main script logic
const args = process.argv.slice(2);

if (args.length === 0) {
  showUsage();
  process.exit(1);
}

if (args[0] === 'validate') {
  const isValid = validateConfig();
  process.exit(isValid ? 0 : 1);
}

if (args.length !== 2) {
  console.error('Error: Both service and provider must be specified');
  showUsage();
  process.exit(1);
}

const [service, provider] = args;

switch (service) {
  case 'ai':
    if (!['astria', 'fal'].includes(provider)) {
      console.error('Error: AI provider must be "astria" or "fal"');
      process.exit(1);
    }
    migrateAIService(provider);
    break;
    
  case 'payment':
    if (!['stripe', 'polar'].includes(provider)) {
      console.error('Error: Payment provider must be "stripe" or "polar"');
      process.exit(1);
    }
    migratePaymentService(provider);
    break;
    
  default:
    console.error('Error: Service must be "ai" or "payment"');
    showUsage();
    process.exit(1);
}

console.log('');
console.log('Migration completed! Run "node scripts/migrate-services.js validate" to check your configuration.');
